
# build.yml
name: Lint and Test

on:
  pull_request:
    types: [opened, reopened, edited]
    branches:         
      - 'main' #only for the develop branch

env:
  TEST_TAG: usagre90/scraper-service:test

jobs:
  lint-and-build:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Lint Docker File
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile
      
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: ${{ env.TEST_TAG }}

      - name: Run Docker image
        run: |
          docker run -d -p 8080:8080 -p 8095:8080 ${{ env.TEST_TAG }}

      - name: Unit testing
        run: |
          pushd tests > /dev/null 2>&1 \
          && ./curl.sh \
          && popd > /dev/null 2>&1
           
  #   # Add additional steps here like scanning of image

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-west-2

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1


  #   - name: Push
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # get the registry from the previous step
  #     run: |
  #       # Push images to AWS ECR
  #       docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_API_GW
  #       docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_CUSTOMER_SERVICE
  #       docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_ORDER_SERVICE
  # deploy-2-eks:
  #   name: deploy-2-eks
  #   runs-on: ubuntu-latest
  #   needs: build-and-push # wait for the push job
  #   steps:

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-west-2

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1

  #   - name: Checkout
  #     uses: actions/checkout@master


  #   - name: Setup kubeconfig # add the cluster to kubectl kubeconfig
  #     id: setup-kubeconfig
  #     run: |
  #       aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
  #   - name: Deploy 
  #     env:
  #       MANIFESTS_DIR: ./manifests 
  #     run: |
  #       # Setup kustomize
  #       cd $MANIFESTS_DIR
  #       curl -s -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
  #       chmod u+x ./kustomize
  #       # Edit manifests with the built image
  #       ./kustomize edit set image api-gw-image=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_API_GW
  #       ./kustomize edit set image customer-service-image=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_CUSTOMER_SERVICE
  #       ./kustomize edit set image order-service-image=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_ORDER_SERVICE
  #       ./kustomize build . | kubectl apply -f -
  #   - name: Test LB GW
  #     env:
  #       MANIFESTS_DIR: ./manifests 
  #     run: |
  #       #wait for IP to the available
  #       sleep 120
  #       # List Public IP of cluster
  #       export loadbalancer=$(kubectl get svc api-gw-external -o jsonpath='{.status.loadBalancer.ingress[*].hostname}')
  #       echo "URL to test HTTPS https://${loadbalancer}/order"
  #       echo "URL to test HTTP http://${loadbalancer}/order"
  #       # Expect the word 'ammount' in the response
  #       curl -k -s http://${loadbalancer}:8080/order | grep amount